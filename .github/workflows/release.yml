name: Release Windows Build

on:
    pull_request:
        types: [closed]
        branches: [main]
    workflow_dispatch:

jobs:
    build-and-release:
        if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
        runs-on: windows-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "22"

            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: "10.17.0"

            - name: Get pnpm store directory
              shell: pwsh
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $env:GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v4
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Get version and tag information
              id: version-info
              shell: pwsh
              run: |
                  # package.json からバージョンを取得
                  $packageJson = Get-Content "packages/desktop-client/package.json" -Raw | ConvertFrom-Json
                  $packageVersion = $packageJson.version

                  if ($env:GITHUB_EVENT_NAME -eq "workflow_dispatch") {
                      # workflow_dispatch の場合は package.json のバージョンを使用
                      $tagName = "v$packageVersion"
                      $version = $packageVersion
                      Write-Host "Manual release creation"
                  } else {
                      # PR の場合は PR タイトルを使用
                      $prTitle = "${{ github.event.pull_request.title }}"
                      $tagName = $prTitle
                      
                      # PRタイトルがv*.*.* 形式の場合はvを除去、そうでなければそのまま使用
                      if ($prTitle -match "^v\d+\.\d+\.\d+.*$") {
                          $version = $prTitle.Substring(1)
                      } else {
                          $version = $prTitle
                      }
                      Write-Host "Release from PR: $prTitle"
                  }

                  echo "tag-name=$tagName" >> $env:GITHUB_OUTPUT
                  echo "version=$version" >> $env:GITHUB_OUTPUT

                  Write-Host "Tag name: $tagName"
                  Write-Host "Version: $version"

            - name: Build Windows App
              run: pnpm desktop-client build:win
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ steps.version-info.outputs.tag-name }}
                  release_name: neXus ${{ steps.version-info.outputs.tag-name }}
                  body: |
                      Release ${{ steps.version-info.outputs.tag-name }}

                      ## Windows Downloads
                      - **Installer**: Download and run the setup file
                      - **Zip Version**: Extract and run without installation

                      ${{ github.event_name == 'workflow_dispatch' && 'Manual release creation' || format('Auto-generated from PR: {0}', github.event.pull_request.title) }}
                  draft: false
                  prerelease: false

            - name: Upload Windows Installer
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: packages/desktop-client/dist/nexus-${{ steps.version-info.outputs.version }}-setup.exe
                  asset_name: windows-x64-nexus-setup.exe
                  asset_content_type: application/octet-stream

            - name: Create Zip Version from win-unpacked
              shell: pwsh
              run: |
                  $version = "${{ steps.version-info.outputs.version }}"
                  $unpackedPath = "packages/desktop-client/dist/win-unpacked"
                  $zipName = "neXus-$version-win"
                  $zipPath = "packages/desktop-client/dist"

                  # win-unpackedフォルダをneXus-{version}-winにリネーム
                  if (Test-Path $unpackedPath) {
                      $renamedPath = Join-Path $zipPath $zipName
                      Move-Item -Path $unpackedPath -Destination $renamedPath
                      
                      # zipファイルを作成
                      $zipFile = Join-Path $zipPath "$zipName.zip"
                      Compress-Archive -Path $renamedPath -DestinationPath $zipFile -CompressionLevel Optimal
                      
                      echo "zip-path=$zipFile" >> $env:GITHUB_OUTPUT
                      echo "zip-name=$zipName.zip" >> $env:GITHUB_OUTPUT
                      
                      Write-Host "Created zip file: $zipFile"
                  } else {
                      Write-Host "win-unpacked folder not found at: $unpackedPath"
                      Get-ChildItem -Path "packages/desktop-client/dist" -Recurse
                      exit 1
                  }
              id: create-zip

            - name: Upload Windows Zip Version
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ${{ steps.create-zip.outputs.zip-path }}
                  asset_name: windows-x64-nexus.zip
                  asset_content_type: application/zip

            - name: Notify success
              shell: pwsh
              run: |
                  $tagName = "${{ steps.version-info.outputs.tag-name }}"
                  Write-Host "✅ Successfully released neXus $tagName"
                  Write-Host "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/$tagName"
