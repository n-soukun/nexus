name: Release Windows Build

on:
    pull_request:
        types: [closed]
        branches: [main]

jobs:
    check-pr-title:
        if: github.event.pull_request.merged == true
        runs-on: ubuntu-latest
        outputs:
            should-release: ${{ steps.check-title.outputs.should-release }}
            version: ${{ steps.extract-version.outputs.version }}
        steps:
            - name: Check PR title for version pattern
              id: check-title
              run: |
                  PR_TITLE="${{ github.event.pull_request.title }}"
                  if [[ $PR_TITLE =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                    echo "should-release=true" >> $GITHUB_OUTPUT
                    echo "PR title matches version pattern: $PR_TITLE"
                  else
                    echo "should-release=false" >> $GITHUB_OUTPUT
                    echo "PR title does not match version pattern: $PR_TITLE"
                  fi

            - name: Extract version from PR title
              id: extract-version
              if: steps.check-title.outputs.should-release == 'true'
              run: |
                  PR_TITLE="${{ github.event.pull_request.title }}"
                  VERSION=${PR_TITLE#v}
                  echo "version=$VERSION" >> $GITHUB_OUTPUT
                  echo "Extracted version: $VERSION"

    build-and-release:
        needs: check-pr-title
        if: needs.check-pr-title.outputs.should-release == 'true'
        runs-on: windows-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"

            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: "10.17.0"

            - name: Get pnpm store directory
              shell: pwsh
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $env:GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v4
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Update package version
              run: |
                  $version = "${{ needs.check-pr-title.outputs.version }}"
                  $packageJsonPath = "packages/desktop-client/package.json"
                  $packageJson = Get-Content $packageJsonPath -Raw | ConvertFrom-Json
                  $packageJson.version = $version
                  $packageJson | ConvertTo-Json -Depth 10 | Set-Content $packageJsonPath -Encoding UTF8

            - name: Build desktop client
              run: pnpm desktop-client build

            - name: Build Windows installer
              run: pnpm desktop-client build:win
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Build Windows portable
              run: pnpm desktop-client build:win --portable
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: v${{ needs.check-pr-title.outputs.version }}
                  release_name: neXus v${{ needs.check-pr-title.outputs.version }}
                  body: |
                      Release v${{ needs.check-pr-title.outputs.version }}

                      ## Windows Downloads
                      - **Installer**: Download and run the setup file
                      - **Portable**: Extract and run without installation

                      Auto-generated from PR: ${{ github.event.pull_request.title }}
                  draft: false
                  prerelease: false

            - name: Upload Windows Installer
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: packages/desktop-client/dist/nexus-${{ needs.check-pr-title.outputs.version }}-setup.exe
                  asset_name: neXus-${{ needs.check-pr-title.outputs.version }}-setup.exe
                  asset_content_type: application/octet-stream

            - name: Find portable archive
              id: find-portable
              shell: pwsh
              run: |
                  $portableFile = Get-ChildItem -Path "packages/desktop-client/dist" -Filter "*portable*.exe" -Recurse | Select-Object -First 1
                  if ($portableFile) {
                    echo "portable-path=$($portableFile.FullName)" >> $env:GITHUB_OUTPUT
                    echo "portable-name=neXus-${{ needs.check-pr-title.outputs.version }}-portable.exe" >> $env:GITHUB_OUTPUT
                  } else {
                    echo "Portable file not found"
                    exit 1
                  }

            - name: Upload Windows Portable
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ${{ steps.find-portable.outputs.portable-path }}
                  asset_name: ${{ steps.find-portable.outputs.portable-name }}
                  asset_content_type: application/octet-stream

    notify-success:
        needs: [check-pr-title, build-and-release]
        if: needs.build-and-release.result == 'success'
        runs-on: ubuntu-latest
        steps:
            - name: Notify success
              run: |
                  echo "âœ… Successfully released neXus v${{ needs.check-pr-title.outputs.version }}"
                  echo "ðŸ”— Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.check-pr-title.outputs.version }}"
